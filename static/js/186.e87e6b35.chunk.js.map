{"version":3,"file":"static/js/186.e87e6b35.chunk.js","mappings":"8LAqCA,UAjCgB,WACd,OAAsCA,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAYR,OAVAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeH,GACZI,MAAK,SAAAC,GACJR,EAAeQ,EAChB,IACAC,OAAM,SAAAR,GACLC,EAASD,EAAMS,QAChB,GACJ,GAAE,CAACP,KAGF,2BACGF,IAAS,uEACe,KAAb,OAAXF,QAAW,IAAXA,OAAA,EAAAA,EAAaY,UACZ,wEAEF,wBACGZ,EAAYa,KAAI,gBAAGT,EAAH,EAAGA,GAAIU,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACf,2BACE,oCAAYD,MACZ,uBAAIC,MAFGX,EADM,QASxB,C,+LCjCDY,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAe,IAAIC,gBAAgB,CACvCC,OAAQ,MACRC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAKCC,EAAW,mCAAG,0FACZ,sBADY,SAGFT,EAAAA,EAAAA,IAAA,UAFV,sBAEU,YAAqBC,IAHnB,cAGnBS,EAHmB,yBAKlBA,EAASjB,KAAKkB,SALI,2CAAH,qDAQXC,EAAW,mCAAG,WAAOxB,GAAP,gFACnByB,EADmB,iBACFzB,GADE,SAGFY,EAAAA,EAAAA,IAAA,UAAaa,EAAb,YAAqBZ,IAHnB,cAGnBS,EAHmB,yBAKlBA,EAASjB,MALS,2CAAH,sDAQXqB,EAAW,mCAAG,WAAO1B,GAAP,gFACnByB,EADmB,iBACFzB,EADE,qBAGFY,EAAAA,EAAAA,IAAA,UAAaa,EAAb,YAAqBZ,IAHnB,cAGnBS,EAHmB,yBAKlBA,EAASjB,KAAKsB,MALI,2CAAH,sDAQXxB,EAAc,mCAAG,WAAOH,GAAP,gFACtByB,EADsB,iBACLzB,EADK,qBAGLY,EAAAA,EAAAA,IAAA,UAAaa,EAAb,YAAqBZ,IAHhB,cAGtBS,EAHsB,yBAKrBA,EAASjB,KAAKkB,SALO,2CAAH,sDAQdK,EAAa,mCAAG,WAAOC,GAAP,6EACd,gBADc,SAGJjB,EAAAA,EAAAA,IAAA,UAFV,gBAEU,YAAqBC,EAArB,kBAA2CgB,IAHvC,cAGrBP,EAHqB,yBAKpBA,EAASjB,KAAKkB,SALM,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","service-api/films-api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmReviews } from 'service-api/films-api';\n\nconst Reviews = () => {\n  const [filmReviews, setfilmReviews] = useState([]);\n  const [error, seterror] = useState('');\n  const { id } = useParams();\n\n  useEffect(() => {\n    getFilmReviews(id)\n      .then(data => {\n        setfilmReviews(data);\n      })\n      .catch(error => {\n        seterror(error.message);\n      });\n  }, [id]);\n\n  return (\n    <div>\n      {error && <p>Sorry, there is no information ðŸ˜­</p>}\n      {filmReviews?.length === 0 && (\n        <p>Unfortunately, there is no information ....</p>\n      )}\n      <ul>\n        {filmReviews.map(({ id, author, content }) => (\n          <li key={id}>\n            <p>Aurhor: {author}</p>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: 'd03c893f0ef0ef1618c3413e2cb11b8a',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\n\nexport const getAllFilms = async () => {\n  const path = '/trending/movie/day';\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getFilmById = async (id) => {\n  const path = `/movie/${id}`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data;\n};\n\nexport const getFilmCast = async (id) => {\n  const path = `/movie/${id}/credits`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.cast;\n};\n\nexport const getFilmReviews = async (id) => {\n  const path = `/movie/${id}/reviews`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getFilmByName = async (query) => {\n  const path = '/search/movie';\n\n  const response = await axios.get(`${path}?${searchParams}&query=${query}`);\n\n  return response.data.results;\n};"],"names":["useState","filmReviews","setfilmReviews","error","seterror","id","useParams","useEffect","getFilmReviews","then","data","catch","message","length","map","author","content","axios","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getAllFilms","response","results","getFilmById","path","getFilmCast","cast","getFilmByName","query"],"sourceRoot":""}