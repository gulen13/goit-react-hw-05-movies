{"version":3,"file":"static/js/247.d03c51f9.chunk.js","mappings":"gNAkDA,UA5Ca,WACX,OAAgCA,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAYR,OAVAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAYH,GACTI,MAAK,SAAAC,GACJR,EAAYQ,EACb,IACAC,OAAM,SAAAR,GACLC,EAASD,EAAMS,QAChB,GACJ,GAAE,CAACP,KAGF,2BACGF,IAAS,uEACY,KAAb,OAARF,QAAQ,IAARA,OAAA,EAAAA,EAAUY,UACT,uEAEDZ,IACC,SAAC,KAAD,UACGA,EAASa,KAAI,gBAAGT,EAAH,EAAGA,GAAIU,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACZ,UAAC,IAAD,YACE,gBACEC,IACEH,EAAY,0CAC2BA,GACnC,8DAENI,IAAKH,EACLI,MAAM,SAER,uBAAIJ,KACJ,wCAAgBC,OAXLZ,EADD,QAmBvB,C,mKC7CYgB,EAAKC,EAAAA,EAAAA,GAAH,iFAMFC,EAAKD,EAAAA,EAAAA,GAAH,4CAIFE,GAAOF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,kDAIJI,EAASJ,EAAAA,EAAAA,GAAH,kH,wNCdNK,GAAUL,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,iLAUPM,EAAMN,EAAAA,EAAAA,IAAH,+JASHO,EAAOP,EAAAA,EAAAA,IAAH,iGAMJQ,EAAIR,EAAAA,EAAAA,EAAH,kEAKDS,EAAYT,EAAAA,EAAAA,GAAH,iGAOTU,GAAcV,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,yM,+LCtCxBW,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAe,IAAIC,gBAAgB,CACvCC,OAAQ,MACRC,QAAS,mCACTC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAKCC,EAAW,mCAAG,0FACZ,sBADY,SAGFT,EAAAA,EAAAA,IAAA,UAFV,sBAEU,YAAqBC,IAHnB,cAGnBS,EAHmB,yBAKlBA,EAASjC,KAAKkC,SALI,2CAAH,qDAQXC,EAAW,mCAAG,WAAOxC,GAAP,gFACnByC,EADmB,iBACFzC,GADE,SAGF4B,EAAAA,EAAAA,IAAA,UAAaa,EAAb,YAAqBZ,IAHnB,cAGnBS,EAHmB,yBAKlBA,EAASjC,MALS,2CAAH,sDAQXF,EAAW,mCAAG,WAAOH,GAAP,gFACnByC,EADmB,iBACFzC,EADE,qBAGF4B,EAAAA,EAAAA,IAAA,UAAaa,EAAb,YAAqBZ,IAHnB,cAGnBS,EAHmB,yBAKlBA,EAASjC,KAAKqC,MALI,2CAAH,sDAQXC,EAAc,mCAAG,WAAO3C,GAAP,gFACtByC,EADsB,iBACLzC,EADK,qBAGL4B,EAAAA,EAAAA,IAAA,UAAaa,EAAb,YAAqBZ,IAHhB,cAGtBS,EAHsB,yBAKrBA,EAASjC,KAAKkC,SALO,2CAAH,sDAQdK,EAAa,mCAAG,WAAOC,GAAP,6EACd,gBADc,SAGJjB,EAAAA,EAAAA,IAAA,UAFV,gBAEU,YAAqBC,EAArB,kBAA2CgB,IAHvC,cAGrBP,EAHqB,yBAKpBA,EAASjC,KAAKkC,SALM,2CAAH,qD","sources":["components/Cast/Cast.jsx","components/MovieList/MovieList.styled.jsx","pages/MovieDetails/MovieDetails.styled.jsx","service-api/films-api.js"],"sourcesContent":["import { LiCast } from 'components/MovieList/MovieList.styled';\nimport { StateList } from 'pages/MovieDetails/MovieDetails.styled';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmCast } from 'service-api/films-api';\n\nconst Cast = () => {\n  const [filmCast, setfilmCast] = useState(null);\n  const [error, seterror] = useState('');\n  const { id } = useParams();\n\n  useEffect(() => {\n    getFilmCast(id)\n      .then(data => {\n        setfilmCast(data);\n      })\n      .catch(error => {\n        seterror(error.message);\n      });\n  }, [id]);\n\n  return (\n    <div>\n      {error && <p>Sorry, there is no information ðŸ˜­</p>}\n      {filmCast?.length === 0 && (\n        <p>Unfortunately, there is no information ....</p>\n      )}\n      {filmCast && (\n        <StateList>\n          {filmCast.map(({ id, profile_path, name, character }) => (\n            <LiCast key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : 'https://dummyimage.com/190x285/aba46f/0011ff.jpg&text=Actor'\n                }\n                alt={name}\n                width=\"190\"\n              />\n              <p>{name}</p>\n              <p>Character : {character}</p>\n            </LiCast>\n          ))}\n        </StateList>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Ul = styled.ul`\n  list-style: none;\n  padding: 0;\n  font-size: large;\n`;\n\nexport const Li = styled.li`\n  margin-top: 5px;\n`;\n\nexport const LINK = styled(Link)`\n  text-decoration: none;\n`;\n\nexport const LiCast = styled.li`\n  max-width: 190px;\n  background-color: #89b5dc;\n  border-radius: 6px;\n  padding: 5px;\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const LinkStl = styled(Link)`\n  color: black;\n  font-size: large;\n  margin: 10px;\n  text-decoration: none;\n  border: 1px solid black;\n  padding: 4px 4px;\n  border-radius: 6px;\n`;\n\nexport const Div = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 12px;\n  padding: 16px 0;\n  margin-bottom: 16px;\n`;\n\nexport const Div2 = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const P = styled.p`\n  font-size: large;\n  font-weight: 700;\n`;\n\nexport const StateList = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n`;\n\nexport const LINKCastRew = styled(Link)`\n  text-decoration: none;\n  width: 100px;\n  font-size: large;\n  padding: 5px 10px;\n  border-radius: 5px;\n  background-color: #83b19d;\n  cursor: pointer;\n  color: #080908;\n`;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: 'd03c893f0ef0ef1618c3413e2cb11b8a',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\n\nexport const getAllFilms = async () => {\n  const path = '/trending/movie/day';\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getFilmById = async (id) => {\n  const path = `/movie/${id}`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data;\n};\n\nexport const getFilmCast = async (id) => {\n  const path = `/movie/${id}/credits`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.cast;\n};\n\nexport const getFilmReviews = async (id) => {\n  const path = `/movie/${id}/reviews`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getFilmByName = async (query) => {\n  const path = '/search/movie';\n\n  const response = await axios.get(`${path}?${searchParams}&query=${query}`);\n\n  return response.data.results;\n};"],"names":["useState","filmCast","setfilmCast","error","seterror","id","useParams","useEffect","getFilmCast","then","data","catch","message","length","map","profile_path","name","character","src","alt","width","Ul","styled","Li","LINK","Link","LiCast","LinkStl","Div","Div2","P","StateList","LINKCastRew","axios","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getAllFilms","response","results","getFilmById","path","cast","getFilmReviews","getFilmByName","query"],"sourceRoot":""}