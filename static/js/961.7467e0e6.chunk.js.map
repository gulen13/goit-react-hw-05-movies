{"version":3,"file":"static/js/961.7467e0e6.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.jsx","pages/MovieDetails/MovieDetails.styled.jsx","service-api/films-api.js"],"sourcesContent":["import React, { useState, Suspense } from 'react';\nimport { useEffect } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getFilmById } from 'service-api/films-api';\nimport {\n  Div,\n  Div2,\n  LINKCastRew,\n  LinkStl,\n  P,\n  StateList,\n} from './MovieDetails.styled';\n\nconst defaultImg = 'https://dummyimage.com/350x400/aba46f/0011ff.jpg&text=Film';\nconst defaultGenresTxt = 'No information about genres';\n\nconst MovieDetails = () => {\n  const [film, setfilm] = useState(null);\n  const { id } = useParams();\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    getFilmById(id).then(data => {\n      setfilm(data);\n    });\n  }, [id]);\n\n  return (\n    film && (\n      <div>\n        <LinkStl to={backLinkHref}>Go Back</LinkStl>\n        <Div>\n          <img\n            src={\n              film.poster_path\n                ? `https://image.tmdb.org/t/p/w500/${film.poster_path}`\n                : defaultImg\n            }\n            alt={film.title}\n            width=\"300\"\n          />\n          <Div2>\n            <h1>\n              {film.title} (\n              {film.release_date\n                ? film.release_date.slice(0, 4)\n                : film.release_date}\n              )\n            </h1>\n            <p>User Score: {Math.round(film.vote_average * 10)}%</p>\n            <P>Overview</P>\n            <p>{film.overview}</p>\n            <P>Genres</P>\n            <p>\n              {film.genres\n                ? film.genres.map(film => film.name).join(', ')\n                : defaultGenresTxt}\n            </p>\n          </Div2>\n        </Div>\n        <hr />\n        <p>Additional information</p>\n        <StateList>\n          <li>\n            <LINKCastRew to=\"cast\" state={{ from: backLinkHref }}>\n              Cast\n            </LINKCastRew>\n          </li>\n          <li>\n            <LINKCastRew to=\"reviews\" state={{ from: backLinkHref }}>\n              Reviews\n            </LINKCastRew>\n          </li>\n        </StateList>\n        <hr />\n        <Suspense fallback={<div>Loading page...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    )\n  );\n};\n\nexport default MovieDetails;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const LinkStl = styled(Link)`\n  color: black;\n  font-size: large;\n  margin: 10px;\n  text-decoration: none;\n  border: 1px solid black;\n  padding: 4px 4px;\n  border-radius: 6px;\n`;\n\nexport const Div = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 12px;\n  padding: 16px 0;\n  margin-bottom: 16px;\n`;\n\nexport const Div2 = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const P = styled.p`\n  font-size: large;\n  font-weight: 700;\n`;\n\nexport const StateList = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n`;\n\nexport const LINKCastRew = styled(Link)`\n  text-decoration: none;\n  width: 100px;\n  font-size: large;\n  padding: 5px 10px;\n  border-radius: 5px;\n  background-color: #83b19d;\n  cursor: pointer;\n  color: #080908;\n`;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: 'd03c893f0ef0ef1618c3413e2cb11b8a',\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\n\nexport const getAllFilms = async () => {\n  const path = '/trending/movie/day';\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getFilmById = async (id) => {\n  const path = `/movie/${id}`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data;\n};\n\nexport const getFilmCast = async (id) => {\n  const path = `/movie/${id}/credits`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.cast;\n};\n\nexport const getFilmReviews = async (id) => {\n  const path = `/movie/${id}/reviews`;\n\n  const response = await axios.get(`${path}?${searchParams}`);\n\n  return response.data.results;\n};\n\nexport const getFilmByName = async (query) => {\n  const path = '/search/movie';\n\n  const response = await axios.get(`${path}?${searchParams}&query=${query}`);\n\n  return response.data.results;\n};"],"names":["useState","film","setfilm","id","useParams","backLinkHref","useLocation","state","from","useEffect","getFilmById","then","data","to","src","poster_path","alt","title","width","release_date","slice","Math","round","vote_average","P","overview","genres","map","name","join","Suspense","fallback","LinkStl","styled","Link","Div","Div2","StateList","LINKCastRew","axios","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","getAllFilms","response","results","path","getFilmCast","cast","getFilmReviews","getFilmByName","query"],"sourceRoot":""}